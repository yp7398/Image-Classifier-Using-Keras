# -*- coding: utf-8 -*-
"""Image_Classifier_Keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IYT_ApNryWRaceVYt9IZgRtZClNeD7Ai
"""

#Program Description: This program will classify images

#importing libraries
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from tensorflow.keras import layers
from keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Loading the data
from keras.datasets import cifar10
(x_train,y_train), (x_test,y_test) = cifar10.load_data()

#Looking at variable datatypes
print(type(x_train))
print(type(y_train))
print(type(x_test))
print(type(y_test))

#get the shape of the arrays
print('x_train:shape',x_train.shape)
print('y_train:shape',y_train.shape)
print('x_test:shape',x_test.shape)
print('y_test:shape',y_test.shape)

#Looking at the first image
index = 10
x_train[index]

#image as a picture
img = plt.imshow(x_train[index])

#get image label
print("The image label is",y_train[index])

#get the image classification
classification = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']

#Printing the image class
print('The image class is:' ,classification[y_train[index][0]])

#convert the labels into a set of 10 nos to input into the neural net
y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)

#print new labels - rows from 0-9. 1 indicates image of that type. 
#each row has exactly one 1
print(y_train_one_hot)

#print the new label of the current image
print('the one hot label is:',y_train_one_hot[index])

#normalize pixel to values between 0 and 1
x_train = x_train/255
x_test = x_test/255

x_train[index]

#Create the models architecture
model = Sequential()

#Add the first layer
model.add(Conv2D(32,(5,5),activation='relu',input_shape=(32,32,3)))

#Add a pooling layer
model.add(MaxPooling2D(pool_size = (2,2)))

#Second convolution layer
model.add(Conv2D(32,(5,5),activation='relu'))

#another pooling layer
model.add(MaxPooling2D(pool_size = (2,2)))

#Flattening layer
model.add(Flatten())

#Add a layer with 1000 neurons
model.add(Dense(1000,activation='relu'))

#drop out layer
model.add(Dropout(0.5))

#Add a layer with 500 neurons
model.add(Dense(500,activation='relu'))

#drop out layer
model.add(Dropout(0.5))

#Add a layer with 250 neurons
model.add(Dense(250,activation='relu'))

#Add a layer with 10 neurons
model.add(Dense(10,activation='softmax'))

#compiling the model
model.compile(loss='categorical_crossentropy',
              optimizer = 'adam',metrics = ['accuracy'])

#training the model
hist = model.fit(x_train,y_train_one_hot,
                 batch_size = 256,
                 epochs = 10,
                 validation_split = 0.2)

#evaluate the model using test data set
model.evaluate(x_test,y_test_one_hot)[1]

#visualize the models accuracy
plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train','Val'],loc='upper left')
plt.show()

#visualize the models loss
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train','Val'],loc='upper right')
plt.show()

#test the model with an example
from google.colab import files
uploaded = files.upload()

#show the image
new_image = plt.imread('frog.jpg')
img = plt.imshow(new_image)

#resizeing the image
from skimage.transform import resize 
resized_image = resize(new_image,(32,32,3))
img = plt.imshow(resized_image)

#get the models predixtions
predictions = model.predict(np.array([resized_image]))
#show the predictions
predictions

#sort the predictions from least to greatest
list_index = [0,1,2,3,4,5,6,7,8,9]
x = predictions

for i in range (10):
  for j in range (10):
    if x[0][list_index[i]] > x[0][list_index[j]]:
      temp = list_index[i]
      list_index[i] = list_index[j]
      list_index[j] = temp

#show sorted labels
print(list_index)

#print the first 5 most likely classes
for i in range (5):
  print(classification[list_index[i]], ':',round(predictions[0][list_index[i]]*100,2),'%')